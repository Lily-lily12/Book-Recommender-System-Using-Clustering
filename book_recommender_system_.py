# -*- coding: utf-8 -*-
"""Book Recommender system .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HzJZk-ybezm5fc2xPS3O61-vNMT8_gaM
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

book = pd.read_csv('Books.csv')
user = pd.read_csv('Users.csv')
rating = pd.read_csv('Ratings.csv')

book.info()

rating.info()

user.head()

book.head()

rating.head()

#Check for missing values
book.isnull().sum()

user.isnull().sum()

rating.isnull().sum()

ratings_with_name = rating.merge(book,on='ISBN')
ratings_with_name

num_rating_df = ratings_with_name.groupby('Book-Title').count()['Book-Rating'].reset_index()
num_rating_df.rename(columns={'Book-Rating':'num_ratings'},inplace=True)
num_rating_df

# Group by 'Book-Title' and calculate the mean of 'Book-Rating'
avg_rating_df = ratings_with_name.groupby('Book-Title')['Book-Rating'].mean().reset_index()
avg_rating_df.rename(columns={'Book-Rating':'avg_ratings'},inplace=True)

avg_rating_df

popular_df = num_rating_df.merge(avg_rating_df,on='Book-Title')
popular_df

"""This part filters the DataFrame popular_df to include only rows where the value in the 'num_ratings' column is greater than or equal to 250. It's selecting only those books that have received at least 250 ratings."""

popular_df = popular_df[popular_df['num_ratings']>=250].sort_values('avg_ratings',ascending=False).head(50)

popular_df

"""# USING K-MEANS CLUSTERING"""

X=popular_df[[	'num_ratings',	'avg_ratings']]

X

# Normalization
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_features = scaler.fit_transform(X)

from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
    kmeans.fit(scaled_features)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters = 4, init = 'k-means++', random_state = 42)
popular_df['Cluster'] = kmeans.fit_predict(scaled_features)

popular_df.head(10)

def recommend_books(book_title, popular_df):
    cluster = popular_df[popular_df['Book-Title'] == book_title]['Cluster'].values[0]
    recommended_books = popular_df[popular_df['Cluster'] == cluster]['Book-Title'].values
    return recommended_books

print(recommend_books("To Kill a Mockingbird", popular_df))

"""# Using Hierarchial Clustering"""

scaled_features

import scipy.cluster.hierarchy as sch
dendrogram = sch.dendrogram(sch.linkage(scaled_features, method = 'ward'))
plt.title('Dendrogram')
plt.xlabel('books')
plt.ylabel('Euclidean distances')
plt.show()

df_copy = popular_df.copy()

df_copy = df_copy.drop(columns=['Cluster'])
df_copy.head()

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters = 2, affinity = 'euclidean', linkage = 'ward')
y_hc = hc.fit_predict(scaled_features)
df_copy['Cluster'] = kmeans.fit_predict(scaled_features)

df_copy.head()

def recommend_books(book_title, df_copy):
    cluster = df_copy[df_copy['Book-Title'] == book_title]['Cluster'].values[0]
    recommended_books = df_copy[df_copy['Cluster'] == cluster]['Book-Title'].values
    return recommended_books

recommend_books('1984',df_copy)